// Generated by rstantools.  Do not edit by hand.

/*
    bayes4psy is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    bayes4psy is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with bayes4psy.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_color_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'color', line 17, column 1 to column 30)",
                                                      " (in 'color', line 18, column 1 to column 23)",
                                                      " (in 'color', line 19, column 1 to column 30)",
                                                      " (in 'color', line 20, column 1 to column 23)",
                                                      " (in 'color', line 21, column 1 to column 30)",
                                                      " (in 'color', line 22, column 1 to column 23)",
                                                      " (in 'color', line 25, column 1 to column 11)",
                                                      " (in 'color', line 26, column 1 to column 23)",
                                                      " (in 'color', line 27, column 1 to column 28)",
                                                      " (in 'color', line 28, column 1 to column 23)",
                                                      " (in 'color', line 29, column 1 to column 28)",
                                                      " (in 'color', line 30, column 1 to column 23)",
                                                      " (in 'color', line 35, column 1 to column 12)",
                                                      " (in 'color', line 43, column 2 to column 48)",
                                                      " (in 'color', line 42, column 28 to line 44, column 2)",
                                                      " (in 'color', line 42, column 8 to line 44, column 2)",
                                                      " (in 'color', line 41, column 2 to column 49)",
                                                      " (in 'color', line 40, column 28 to line 42, column 2)",
                                                      " (in 'color', line 40, column 8 to line 44, column 2)",
                                                      " (in 'color', line 39, column 2 to column 50)",
                                                      " (in 'color', line 38, column 28 to line 40, column 2)",
                                                      " (in 'color', line 38, column 8 to line 44, column 2)",
                                                      " (in 'color', line 37, column 2 to column 51)",
                                                      " (in 'color', line 36, column 21 to line 38, column 2)",
                                                      " (in 'color', line 36, column 1 to line 44, column 2)",
                                                      " (in 'color', line 46, column 1 to column 8)",
                                                      " (in 'color', line 54, column 2 to column 51)",
                                                      " (in 'color', line 53, column 28 to line 55, column 2)",
                                                      " (in 'color', line 53, column 8 to line 55, column 2)",
                                                      " (in 'color', line 52, column 2 to column 52)",
                                                      " (in 'color', line 51, column 28 to line 53, column 2)",
                                                      " (in 'color', line 51, column 8 to line 55, column 2)",
                                                      " (in 'color', line 50, column 2 to column 53)",
                                                      " (in 'color', line 49, column 28 to line 51, column 2)",
                                                      " (in 'color', line 49, column 8 to line 55, column 2)",
                                                      " (in 'color', line 48, column 2 to column 54)",
                                                      " (in 'color', line 47, column 21 to line 49, column 2)",
                                                      " (in 'color', line 47, column 1 to line 55, column 2)",
                                                      " (in 'color', line 57, column 1 to column 8)",
                                                      " (in 'color', line 65, column 2 to column 48)",
                                                      " (in 'color', line 64, column 28 to line 66, column 2)",
                                                      " (in 'color', line 64, column 8 to line 66, column 2)",
                                                      " (in 'color', line 63, column 2 to column 49)",
                                                      " (in 'color', line 62, column 28 to line 64, column 2)",
                                                      " (in 'color', line 62, column 8 to line 66, column 2)",
                                                      " (in 'color', line 61, column 2 to column 50)",
                                                      " (in 'color', line 60, column 28 to line 62, column 2)",
                                                      " (in 'color', line 60, column 8 to line 66, column 2)",
                                                      " (in 'color', line 59, column 2 to column 51)",
                                                      " (in 'color', line 58, column 21 to line 60, column 2)",
                                                      " (in 'color', line 58, column 1 to line 66, column 2)",
                                                      " (in 'color', line 68, column 1 to column 8)",
                                                      " (in 'color', line 76, column 2 to column 51)",
                                                      " (in 'color', line 75, column 28 to line 77, column 2)",
                                                      " (in 'color', line 75, column 8 to line 77, column 2)",
                                                      " (in 'color', line 74, column 2 to column 52)",
                                                      " (in 'color', line 73, column 28 to line 75, column 2)",
                                                      " (in 'color', line 73, column 8 to line 77, column 2)",
                                                      " (in 'color', line 72, column 2 to column 53)",
                                                      " (in 'color', line 71, column 28 to line 73, column 2)",
                                                      " (in 'color', line 71, column 8 to line 77, column 2)",
                                                      " (in 'color', line 70, column 2 to column 54)",
                                                      " (in 'color', line 69, column 21 to line 71, column 2)",
                                                      " (in 'color', line 69, column 1 to line 77, column 2)",
                                                      " (in 'color', line 79, column 1 to column 8)",
                                                      " (in 'color', line 87, column 2 to column 48)",
                                                      " (in 'color', line 86, column 28 to line 88, column 2)",
                                                      " (in 'color', line 86, column 8 to line 88, column 2)",
                                                      " (in 'color', line 85, column 2 to column 49)",
                                                      " (in 'color', line 84, column 28 to line 86, column 2)",
                                                      " (in 'color', line 84, column 8 to line 88, column 2)",
                                                      " (in 'color', line 83, column 2 to column 50)",
                                                      " (in 'color', line 82, column 28 to line 84, column 2)",
                                                      " (in 'color', line 82, column 8 to line 88, column 2)",
                                                      " (in 'color', line 81, column 2 to column 51)",
                                                      " (in 'color', line 80, column 21 to line 82, column 2)",
                                                      " (in 'color', line 80, column 1 to line 88, column 2)",
                                                      " (in 'color', line 90, column 1 to column 8)",
                                                      " (in 'color', line 98, column 2 to column 51)",
                                                      " (in 'color', line 97, column 28 to line 99, column 2)",
                                                      " (in 'color', line 97, column 8 to line 99, column 2)",
                                                      " (in 'color', line 96, column 2 to column 52)",
                                                      " (in 'color', line 95, column 28 to line 97, column 2)",
                                                      " (in 'color', line 95, column 8 to line 99, column 2)",
                                                      " (in 'color', line 94, column 2 to column 53)",
                                                      " (in 'color', line 93, column 28 to line 95, column 2)",
                                                      " (in 'color', line 93, column 8 to line 99, column 2)",
                                                      " (in 'color', line 92, column 2 to column 54)",
                                                      " (in 'color', line 91, column 21 to line 93, column 2)",
                                                      " (in 'color', line 91, column 1 to line 99, column 2)",
                                                      " (in 'color', line 101, column 1 to column 8)",
                                                      " (in 'color', line 109, column 2 to column 48)",
                                                      " (in 'color', line 108, column 28 to line 110, column 2)",
                                                      " (in 'color', line 108, column 8 to line 110, column 2)",
                                                      " (in 'color', line 107, column 2 to column 49)",
                                                      " (in 'color', line 106, column 28 to line 108, column 2)",
                                                      " (in 'color', line 106, column 8 to line 110, column 2)",
                                                      " (in 'color', line 105, column 2 to column 50)",
                                                      " (in 'color', line 104, column 28 to line 106, column 2)",
                                                      " (in 'color', line 104, column 8 to line 110, column 2)",
                                                      " (in 'color', line 103, column 2 to column 51)",
                                                      " (in 'color', line 102, column 21 to line 104, column 2)",
                                                      " (in 'color', line 102, column 1 to line 110, column 2)",
                                                      " (in 'color', line 112, column 1 to column 8)",
                                                      " (in 'color', line 120, column 2 to column 51)",
                                                      " (in 'color', line 119, column 28 to line 121, column 2)",
                                                      " (in 'color', line 119, column 8 to line 121, column 2)",
                                                      " (in 'color', line 118, column 2 to column 52)",
                                                      " (in 'color', line 117, column 28 to line 119, column 2)",
                                                      " (in 'color', line 117, column 8 to line 121, column 2)",
                                                      " (in 'color', line 116, column 2 to column 53)",
                                                      " (in 'color', line 115, column 28 to line 117, column 2)",
                                                      " (in 'color', line 115, column 8 to line 121, column 2)",
                                                      " (in 'color', line 114, column 2 to column 54)",
                                                      " (in 'color', line 113, column 21 to line 115, column 2)",
                                                      " (in 'color', line 113, column 1 to line 121, column 2)",
                                                      " (in 'color', line 123, column 1 to column 8)",
                                                      " (in 'color', line 131, column 2 to column 48)",
                                                      " (in 'color', line 130, column 28 to line 132, column 2)",
                                                      " (in 'color', line 130, column 8 to line 132, column 2)",
                                                      " (in 'color', line 129, column 2 to column 49)",
                                                      " (in 'color', line 128, column 28 to line 130, column 2)",
                                                      " (in 'color', line 128, column 8 to line 132, column 2)",
                                                      " (in 'color', line 127, column 2 to column 50)",
                                                      " (in 'color', line 126, column 28 to line 128, column 2)",
                                                      " (in 'color', line 126, column 8 to line 132, column 2)",
                                                      " (in 'color', line 125, column 2 to column 51)",
                                                      " (in 'color', line 124, column 21 to line 126, column 2)",
                                                      " (in 'color', line 124, column 1 to line 132, column 2)",
                                                      " (in 'color', line 134, column 1 to column 9)",
                                                      " (in 'color', line 142, column 2 to column 51)",
                                                      " (in 'color', line 141, column 28 to line 143, column 2)",
                                                      " (in 'color', line 141, column 8 to line 143, column 2)",
                                                      " (in 'color', line 140, column 2 to column 52)",
                                                      " (in 'color', line 139, column 28 to line 141, column 2)",
                                                      " (in 'color', line 139, column 8 to line 143, column 2)",
                                                      " (in 'color', line 138, column 2 to column 53)",
                                                      " (in 'color', line 137, column 28 to line 139, column 2)",
                                                      " (in 'color', line 137, column 8 to line 143, column 2)",
                                                      " (in 'color', line 136, column 2 to column 54)",
                                                      " (in 'color', line 135, column 21 to line 137, column 2)",
                                                      " (in 'color', line 135, column 1 to line 143, column 2)",
                                                      " (in 'color', line 145, column 1 to column 9)",
                                                      " (in 'color', line 153, column 2 to column 48)",
                                                      " (in 'color', line 152, column 28 to line 154, column 2)",
                                                      " (in 'color', line 152, column 8 to line 154, column 2)",
                                                      " (in 'color', line 151, column 2 to column 49)",
                                                      " (in 'color', line 150, column 28 to line 152, column 2)",
                                                      " (in 'color', line 150, column 8 to line 154, column 2)",
                                                      " (in 'color', line 149, column 2 to column 50)",
                                                      " (in 'color', line 148, column 28 to line 150, column 2)",
                                                      " (in 'color', line 148, column 8 to line 154, column 2)",
                                                      " (in 'color', line 147, column 2 to column 51)",
                                                      " (in 'color', line 146, column 21 to line 148, column 2)",
                                                      " (in 'color', line 146, column 1 to line 154, column 2)",
                                                      " (in 'color', line 156, column 1 to column 9)",
                                                      " (in 'color', line 164, column 2 to column 51)",
                                                      " (in 'color', line 163, column 28 to line 165, column 2)",
                                                      " (in 'color', line 163, column 8 to line 165, column 2)",
                                                      " (in 'color', line 162, column 2 to column 52)",
                                                      " (in 'color', line 161, column 28 to line 163, column 2)",
                                                      " (in 'color', line 161, column 8 to line 165, column 2)",
                                                      " (in 'color', line 160, column 2 to column 53)",
                                                      " (in 'color', line 159, column 28 to line 161, column 2)",
                                                      " (in 'color', line 159, column 8 to line 165, column 2)",
                                                      " (in 'color', line 158, column 2 to column 54)",
                                                      " (in 'color', line 157, column 21 to line 159, column 2)",
                                                      " (in 'color', line 157, column 1 to line 165, column 2)",
                                                      " (in 'color', line 168, column 1 to column 27)",
                                                      " (in 'color', line 169, column 1 to column 27)",
                                                      " (in 'color', line 170, column 1 to column 27)",
                                                      " (in 'color', line 172, column 1 to column 30)",
                                                      " (in 'color', line 173, column 1 to column 27)",
                                                      " (in 'color', line 174, column 1 to column 27)",
                                                      " (in 'color', line 2, column 1 to column 16)",
                                                      " (in 'color', line 4, column 27 to column 28)",
                                                      " (in 'color', line 4, column 1 to column 32)",
                                                      " (in 'color', line 5, column 27 to column 28)",
                                                      " (in 'color', line 5, column 1 to column 32)",
                                                      " (in 'color', line 6, column 27 to column 28)",
                                                      " (in 'color', line 6, column 1 to column 32)",
                                                      " (in 'color', line 8, column 30 to column 31)",
                                                      " (in 'color', line 8, column 1 to column 35)",
                                                      " (in 'color', line 9, column 25 to column 26)",
                                                      " (in 'color', line 9, column 1 to column 30)",
                                                      " (in 'color', line 10, column 25 to column 26)",
                                                      " (in 'color', line 10, column 1 to column 30)",
                                                      " (in 'color', line 12, column 1 to column 30)",
                                                      " (in 'color', line 13, column 1 to column 21)"};
#include <stan_meta_header.hpp>
class model_color final : public model_base_crtp<model_color> {
private:
  int n;
  Eigen::Matrix<double, -1, 1> r;
  Eigen::Matrix<double, -1, 1> g;
  Eigen::Matrix<double, -1, 1> b;
  Eigen::Matrix<double, -1, 1> h;
  Eigen::Matrix<double, -1, 1> s;
  Eigen::Matrix<double, -1, 1> v;
  std::vector<int> p_ids;
  Eigen::Matrix<double, -1, 1> p_values;
 
public:
  ~model_color() { }
  
  inline std::string model_name() const final { return "model_color"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_color(stan::io::var_context& context__,
              unsigned int random_seed__ = 0,
              std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_color_namespace::model_color";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 175;
      context__.validate_dims("data initialization","n","int",
          context__.to_vec());
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 175;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 175;
      current_statement__ = 175;
      check_greater_or_equal(function__, "n", n, 0);
      current_statement__ = 176;
      validate_non_negative_index("r", "n", n);
      current_statement__ = 177;
      context__.validate_dims("data initialization","r","double",
          context__.to_vec(n));
      r = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(r, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> r_flat__;
        current_statement__ = 177;
        assign(r_flat__, nil_index_list(), context__.vals_r("r"),
          "assigning variable r_flat__");
        current_statement__ = 177;
        pos__ = 1;
        current_statement__ = 177;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 177;
          assign(r, cons_list(index_uni(sym1__), nil_index_list()),
            r_flat__[(pos__ - 1)], "assigning variable r");
          current_statement__ = 177;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 177;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 177;
        current_statement__ = 177;
        check_greater_or_equal(function__, "r[sym1__]", r[(sym1__ - 1)], 0);}
      current_statement__ = 177;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 177;
        current_statement__ = 177;
        check_less_or_equal(function__, "r[sym1__]", r[(sym1__ - 1)], 255);}
      current_statement__ = 178;
      validate_non_negative_index("g", "n", n);
      current_statement__ = 179;
      context__.validate_dims("data initialization","g","double",
          context__.to_vec(n));
      g = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(g, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> g_flat__;
        current_statement__ = 179;
        assign(g_flat__, nil_index_list(), context__.vals_r("g"),
          "assigning variable g_flat__");
        current_statement__ = 179;
        pos__ = 1;
        current_statement__ = 179;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 179;
          assign(g, cons_list(index_uni(sym1__), nil_index_list()),
            g_flat__[(pos__ - 1)], "assigning variable g");
          current_statement__ = 179;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 179;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 179;
        current_statement__ = 179;
        check_greater_or_equal(function__, "g[sym1__]", g[(sym1__ - 1)], 0);}
      current_statement__ = 179;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 179;
        current_statement__ = 179;
        check_less_or_equal(function__, "g[sym1__]", g[(sym1__ - 1)], 255);}
      current_statement__ = 180;
      validate_non_negative_index("b", "n", n);
      current_statement__ = 181;
      context__.validate_dims("data initialization","b","double",
          context__.to_vec(n));
      b = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> b_flat__;
        current_statement__ = 181;
        assign(b_flat__, nil_index_list(), context__.vals_r("b"),
          "assigning variable b_flat__");
        current_statement__ = 181;
        pos__ = 1;
        current_statement__ = 181;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 181;
          assign(b, cons_list(index_uni(sym1__), nil_index_list()),
            b_flat__[(pos__ - 1)], "assigning variable b");
          current_statement__ = 181;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 181;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 181;
        current_statement__ = 181;
        check_greater_or_equal(function__, "b[sym1__]", b[(sym1__ - 1)], 0);}
      current_statement__ = 181;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 181;
        current_statement__ = 181;
        check_less_or_equal(function__, "b[sym1__]", b[(sym1__ - 1)], 255);}
      current_statement__ = 182;
      validate_non_negative_index("h", "n", n);
      current_statement__ = 183;
      context__.validate_dims("data initialization","h","double",
          context__.to_vec(n));
      h = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(h, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> h_flat__;
        current_statement__ = 183;
        assign(h_flat__, nil_index_list(), context__.vals_r("h"),
          "assigning variable h_flat__");
        current_statement__ = 183;
        pos__ = 1;
        current_statement__ = 183;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 183;
          assign(h, cons_list(index_uni(sym1__), nil_index_list()),
            h_flat__[(pos__ - 1)], "assigning variable h");
          current_statement__ = 183;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 183;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 183;
        current_statement__ = 183;
        check_greater_or_equal(function__, "h[sym1__]", h[(sym1__ - 1)], 0);}
      current_statement__ = 183;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 183;
        current_statement__ = 183;
        check_less_or_equal(function__, "h[sym1__]", h[(sym1__ - 1)],
                            (2 * stan::math::pi()));}
      current_statement__ = 184;
      validate_non_negative_index("s", "n", n);
      current_statement__ = 185;
      context__.validate_dims("data initialization","s","double",
          context__.to_vec(n));
      s = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(s, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> s_flat__;
        current_statement__ = 185;
        assign(s_flat__, nil_index_list(), context__.vals_r("s"),
          "assigning variable s_flat__");
        current_statement__ = 185;
        pos__ = 1;
        current_statement__ = 185;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 185;
          assign(s, cons_list(index_uni(sym1__), nil_index_list()),
            s_flat__[(pos__ - 1)], "assigning variable s");
          current_statement__ = 185;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 185;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 185;
        current_statement__ = 185;
        check_greater_or_equal(function__, "s[sym1__]", s[(sym1__ - 1)], 0);}
      current_statement__ = 185;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 185;
        current_statement__ = 185;
        check_less_or_equal(function__, "s[sym1__]", s[(sym1__ - 1)], 1);}
      current_statement__ = 186;
      validate_non_negative_index("v", "n", n);
      current_statement__ = 187;
      context__.validate_dims("data initialization","v","double",
          context__.to_vec(n));
      v = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(v, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> v_flat__;
        current_statement__ = 187;
        assign(v_flat__, nil_index_list(), context__.vals_r("v"),
          "assigning variable v_flat__");
        current_statement__ = 187;
        pos__ = 1;
        current_statement__ = 187;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 187;
          assign(v, cons_list(index_uni(sym1__), nil_index_list()),
            v_flat__[(pos__ - 1)], "assigning variable v");
          current_statement__ = 187;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 187;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 187;
        current_statement__ = 187;
        check_greater_or_equal(function__, "v[sym1__]", v[(sym1__ - 1)], 0);}
      current_statement__ = 187;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 187;
        current_statement__ = 187;
        check_less_or_equal(function__, "v[sym1__]", v[(sym1__ - 1)], 1);}
      current_statement__ = 188;
      context__.validate_dims("data initialization","p_ids","int",
          context__.to_vec(12));
      p_ids = std::vector<int>(12, std::numeric_limits<int>::min());
      
      current_statement__ = 188;
      assign(p_ids, nil_index_list(), context__.vals_i("p_ids"),
        "assigning variable p_ids");
      current_statement__ = 188;
      for (int sym1__ = 1; sym1__ <= 12; ++sym1__) {
        current_statement__ = 188;
        current_statement__ = 188;
        check_greater_or_equal(function__, "p_ids[sym1__]",
                               p_ids[(sym1__ - 1)], 0);}
      current_statement__ = 189;
      context__.validate_dims("data initialization","p_values","double",
          context__.to_vec(24));
      p_values = Eigen::Matrix<double, -1, 1>(24);
      stan::math::fill(p_values, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> p_values_flat__;
        current_statement__ = 189;
        assign(p_values_flat__, nil_index_list(),
          context__.vals_r("p_values"), "assigning variable p_values_flat__");
        current_statement__ = 189;
        pos__ = 1;
        current_statement__ = 189;
        for (int sym1__ = 1; sym1__ <= 24; ++sym1__) {
          current_statement__ = 189;
          assign(p_values, cons_list(index_uni(sym1__), nil_index_list()),
            p_values_flat__[(pos__ - 1)], "assigning variable p_values");
          current_statement__ = 189;
          pos__ = (pos__ + 1);}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_color_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      local_scalar_t__ mu_r;
      mu_r = DUMMY_VAR__;
      
      current_statement__ = 1;
      mu_r = in__.scalar();
      current_statement__ = 1;
      if (jacobian__) {
        current_statement__ = 1;
        mu_r = stan::math::lub_constrain(mu_r, 0, 255, lp__);
      } else {
        current_statement__ = 1;
        mu_r = stan::math::lub_constrain(mu_r, 0, 255);
      }
      local_scalar_t__ sigma_r;
      sigma_r = DUMMY_VAR__;
      
      current_statement__ = 2;
      sigma_r = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        sigma_r = stan::math::lb_constrain(sigma_r, 0, lp__);
      } else {
        current_statement__ = 2;
        sigma_r = stan::math::lb_constrain(sigma_r, 0);
      }
      local_scalar_t__ mu_g;
      mu_g = DUMMY_VAR__;
      
      current_statement__ = 3;
      mu_g = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        mu_g = stan::math::lub_constrain(mu_g, 0, 255, lp__);
      } else {
        current_statement__ = 3;
        mu_g = stan::math::lub_constrain(mu_g, 0, 255);
      }
      local_scalar_t__ sigma_g;
      sigma_g = DUMMY_VAR__;
      
      current_statement__ = 4;
      sigma_g = in__.scalar();
      current_statement__ = 4;
      if (jacobian__) {
        current_statement__ = 4;
        sigma_g = stan::math::lb_constrain(sigma_g, 0, lp__);
      } else {
        current_statement__ = 4;
        sigma_g = stan::math::lb_constrain(sigma_g, 0);
      }
      local_scalar_t__ mu_b;
      mu_b = DUMMY_VAR__;
      
      current_statement__ = 5;
      mu_b = in__.scalar();
      current_statement__ = 5;
      if (jacobian__) {
        current_statement__ = 5;
        mu_b = stan::math::lub_constrain(mu_b, 0, 255, lp__);
      } else {
        current_statement__ = 5;
        mu_b = stan::math::lub_constrain(mu_b, 0, 255);
      }
      local_scalar_t__ sigma_b;
      sigma_b = DUMMY_VAR__;
      
      current_statement__ = 6;
      sigma_b = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        sigma_b = stan::math::lb_constrain(sigma_b, 0, lp__);
      } else {
        current_statement__ = 6;
        sigma_b = stan::math::lb_constrain(sigma_b, 0);
      }
      local_scalar_t__ mu_h;
      mu_h = DUMMY_VAR__;
      
      current_statement__ = 7;
      mu_h = in__.scalar();
      local_scalar_t__ kappa_h;
      kappa_h = DUMMY_VAR__;
      
      current_statement__ = 8;
      kappa_h = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        kappa_h = stan::math::lb_constrain(kappa_h, 0, lp__);
      } else {
        current_statement__ = 8;
        kappa_h = stan::math::lb_constrain(kappa_h, 0);
      }
      local_scalar_t__ mu_s;
      mu_s = DUMMY_VAR__;
      
      current_statement__ = 9;
      mu_s = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        mu_s = stan::math::lub_constrain(mu_s, 0, 1, lp__);
      } else {
        current_statement__ = 9;
        mu_s = stan::math::lub_constrain(mu_s, 0, 1);
      }
      local_scalar_t__ sigma_s;
      sigma_s = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_s = in__.scalar();
      current_statement__ = 10;
      if (jacobian__) {
        current_statement__ = 10;
        sigma_s = stan::math::lb_constrain(sigma_s, 0, lp__);
      } else {
        current_statement__ = 10;
        sigma_s = stan::math::lb_constrain(sigma_s, 0);
      }
      local_scalar_t__ mu_v;
      mu_v = DUMMY_VAR__;
      
      current_statement__ = 11;
      mu_v = in__.scalar();
      current_statement__ = 11;
      if (jacobian__) {
        current_statement__ = 11;
        mu_v = stan::math::lub_constrain(mu_v, 0, 1, lp__);
      } else {
        current_statement__ = 11;
        mu_v = stan::math::lub_constrain(mu_v, 0, 1);
      }
      local_scalar_t__ sigma_v;
      sigma_v = DUMMY_VAR__;
      
      current_statement__ = 12;
      sigma_v = in__.scalar();
      current_statement__ = 12;
      if (jacobian__) {
        current_statement__ = 12;
        sigma_v = stan::math::lb_constrain(sigma_v, 0, lp__);
      } else {
        current_statement__ = 12;
        sigma_v = stan::math::lb_constrain(sigma_v, 0);
      }
      {
        int id;
        id = std::numeric_limits<int>::min();
        
        current_statement__ = 13;
        id = 1;
        current_statement__ = 25;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 23;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_r, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 22;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 20;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_r, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 19;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 17;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_r, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 16;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 14;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_r, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 26;
        id = 2;
        current_statement__ = 38;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 36;
          lp_accum__.add(
            uniform_lpdf<propto__>(sigma_r, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 35;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 33;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_r, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 32;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 30;
              lp_accum__.add(
                gamma_lpdf<propto__>(sigma_r, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 29;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 27;
                lp_accum__.add(
                  beta_lpdf<propto__>(sigma_r,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 39;
        id = 3;
        current_statement__ = 51;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 49;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_g, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 48;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 46;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_g, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 45;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 43;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_g, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 42;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 40;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_g, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 52;
        id = 4;
        current_statement__ = 64;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 62;
          lp_accum__.add(
            uniform_lpdf<propto__>(sigma_g, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 61;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 59;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_g, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 58;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 56;
              lp_accum__.add(
                gamma_lpdf<propto__>(sigma_g, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 55;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 53;
                lp_accum__.add(
                  beta_lpdf<propto__>(sigma_g,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 65;
        id = 5;
        current_statement__ = 77;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 75;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_b, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 74;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 72;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_b, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 71;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 69;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_b, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 68;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 66;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_b, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 78;
        id = 6;
        current_statement__ = 90;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 88;
          lp_accum__.add(
            uniform_lpdf<propto__>(sigma_b, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 87;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 85;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_b, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 84;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 82;
              lp_accum__.add(
                gamma_lpdf<propto__>(sigma_b, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 81;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 79;
                lp_accum__.add(
                  beta_lpdf<propto__>(sigma_b,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 91;
        id = 7;
        current_statement__ = 103;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 101;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_h, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 100;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 98;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_h, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 97;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 95;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_h, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 94;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 92;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_h, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 104;
        id = 8;
        current_statement__ = 116;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 114;
          lp_accum__.add(
            uniform_lpdf<propto__>(kappa_h, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 113;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 111;
            lp_accum__.add(
              normal_lpdf<propto__>(kappa_h, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 110;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 108;
              lp_accum__.add(
                gamma_lpdf<propto__>(kappa_h, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 107;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 105;
                lp_accum__.add(
                  beta_lpdf<propto__>(kappa_h,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 117;
        id = 9;
        current_statement__ = 129;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 127;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_s, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 126;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 124;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_s, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 123;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 121;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_s, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 120;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 118;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_s, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 130;
        id = 10;
        current_statement__ = 142;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 140;
          lp_accum__.add(
            uniform_lpdf<propto__>(sigma_s, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 139;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 137;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_s, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 136;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 134;
              lp_accum__.add(
                gamma_lpdf<propto__>(sigma_s, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 133;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 131;
                lp_accum__.add(
                  beta_lpdf<propto__>(sigma_s,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 143;
        id = 11;
        current_statement__ = 155;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 153;
          lp_accum__.add(
            uniform_lpdf<propto__>(mu_v, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 152;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 150;
            lp_accum__.add(
              normal_lpdf<propto__>(mu_v, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 149;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 147;
              lp_accum__.add(
                gamma_lpdf<propto__>(mu_v, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 146;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 144;
                lp_accum__.add(
                  beta_lpdf<propto__>(mu_v, p_values[(((id * 2) - 1) - 1)],
                    p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 156;
        id = 12;
        current_statement__ = 168;
        if (logical_eq(p_ids[(id - 1)], 1)) {
          current_statement__ = 166;
          lp_accum__.add(
            uniform_lpdf<propto__>(sigma_v, p_values[(((id * 2) - 1) - 1)],
              p_values[((id * 2) - 1)]));
        } else {
          current_statement__ = 165;
          if (logical_eq(p_ids[(id - 1)], 2)) {
            current_statement__ = 163;
            lp_accum__.add(
              normal_lpdf<propto__>(sigma_v, p_values[(((id * 2) - 1) - 1)],
                p_values[((id * 2) - 1)]));
          } else {
            current_statement__ = 162;
            if (logical_eq(p_ids[(id - 1)], 3)) {
              current_statement__ = 160;
              lp_accum__.add(
                gamma_lpdf<propto__>(sigma_v, p_values[(((id * 2) - 1) - 1)],
                  p_values[((id * 2) - 1)]));
            } else {
              current_statement__ = 159;
              if (logical_eq(p_ids[(id - 1)], 4)) {
                current_statement__ = 157;
                lp_accum__.add(
                  beta_lpdf<propto__>(sigma_v,
                    p_values[(((id * 2) - 1) - 1)], p_values[((id * 2) - 1)]));
              } 
            }
          }
        }
        current_statement__ = 169;
        lp_accum__.add(normal_lpdf<propto__>(r, mu_r, sigma_r));
        current_statement__ = 170;
        lp_accum__.add(normal_lpdf<propto__>(g, mu_g, sigma_g));
        current_statement__ = 171;
        lp_accum__.add(normal_lpdf<propto__>(b, mu_b, sigma_b));
        current_statement__ = 172;
        lp_accum__.add(von_mises_lpdf<propto__>(h, mu_h, kappa_h));
        current_statement__ = 173;
        lp_accum__.add(normal_lpdf<propto__>(s, mu_s, sigma_s));
        current_statement__ = 174;
        lp_accum__.add(normal_lpdf<propto__>(v, mu_v, sigma_v));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_color_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      double mu_r;
      mu_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_r = in__.scalar();
      current_statement__ = 1;
      mu_r = stan::math::lub_constrain(mu_r, 0, 255);
      double sigma_r;
      sigma_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_r = in__.scalar();
      current_statement__ = 2;
      sigma_r = stan::math::lb_constrain(sigma_r, 0);
      double mu_g;
      mu_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_g = in__.scalar();
      current_statement__ = 3;
      mu_g = stan::math::lub_constrain(mu_g, 0, 255);
      double sigma_g;
      sigma_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_g = in__.scalar();
      current_statement__ = 4;
      sigma_g = stan::math::lb_constrain(sigma_g, 0);
      double mu_b;
      mu_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu_b = in__.scalar();
      current_statement__ = 5;
      mu_b = stan::math::lub_constrain(mu_b, 0, 255);
      double sigma_b;
      sigma_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_b = in__.scalar();
      current_statement__ = 6;
      sigma_b = stan::math::lb_constrain(sigma_b, 0);
      double mu_h;
      mu_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      mu_h = in__.scalar();
      double kappa_h;
      kappa_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa_h = in__.scalar();
      current_statement__ = 8;
      kappa_h = stan::math::lb_constrain(kappa_h, 0);
      double mu_s;
      mu_s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_s = in__.scalar();
      current_statement__ = 9;
      mu_s = stan::math::lub_constrain(mu_s, 0, 1);
      double sigma_s;
      sigma_s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_s = in__.scalar();
      current_statement__ = 10;
      sigma_s = stan::math::lb_constrain(sigma_s, 0);
      double mu_v;
      mu_v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      mu_v = in__.scalar();
      current_statement__ = 11;
      mu_v = stan::math::lub_constrain(mu_v, 0, 1);
      double sigma_v;
      sigma_v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_v = in__.scalar();
      current_statement__ = 12;
      sigma_v = stan::math::lb_constrain(sigma_v, 0);
      vars__.emplace_back(mu_r);
      vars__.emplace_back(sigma_r);
      vars__.emplace_back(mu_g);
      vars__.emplace_back(sigma_g);
      vars__.emplace_back(mu_b);
      vars__.emplace_back(sigma_b);
      vars__.emplace_back(mu_h);
      vars__.emplace_back(kappa_h);
      vars__.emplace_back(mu_s);
      vars__.emplace_back(sigma_s);
      vars__.emplace_back(mu_v);
      vars__.emplace_back(sigma_v);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double mu_r;
      mu_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_r = context__.vals_r("mu_r")[(1 - 1)];
      double mu_r_free__;
      mu_r_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      mu_r_free__ = stan::math::lub_free(mu_r, 0, 255);
      double sigma_r;
      sigma_r = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_r = context__.vals_r("sigma_r")[(1 - 1)];
      double sigma_r_free__;
      sigma_r_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      sigma_r_free__ = stan::math::lb_free(sigma_r, 0);
      double mu_g;
      mu_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_g = context__.vals_r("mu_g")[(1 - 1)];
      double mu_g_free__;
      mu_g_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      mu_g_free__ = stan::math::lub_free(mu_g, 0, 255);
      double sigma_g;
      sigma_g = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_g = context__.vals_r("sigma_g")[(1 - 1)];
      double sigma_g_free__;
      sigma_g_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      sigma_g_free__ = stan::math::lb_free(sigma_g, 0);
      double mu_b;
      mu_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu_b = context__.vals_r("mu_b")[(1 - 1)];
      double mu_b_free__;
      mu_b_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      mu_b_free__ = stan::math::lub_free(mu_b, 0, 255);
      double sigma_b;
      sigma_b = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_b = context__.vals_r("sigma_b")[(1 - 1)];
      double sigma_b_free__;
      sigma_b_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      sigma_b_free__ = stan::math::lb_free(sigma_b, 0);
      double mu_h;
      mu_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      mu_h = context__.vals_r("mu_h")[(1 - 1)];
      double kappa_h;
      kappa_h = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa_h = context__.vals_r("kappa_h")[(1 - 1)];
      double kappa_h_free__;
      kappa_h_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      kappa_h_free__ = stan::math::lb_free(kappa_h, 0);
      double mu_s;
      mu_s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_s = context__.vals_r("mu_s")[(1 - 1)];
      double mu_s_free__;
      mu_s_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      mu_s_free__ = stan::math::lub_free(mu_s, 0, 1);
      double sigma_s;
      sigma_s = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_s = context__.vals_r("sigma_s")[(1 - 1)];
      double sigma_s_free__;
      sigma_s_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 10;
      sigma_s_free__ = stan::math::lb_free(sigma_s, 0);
      double mu_v;
      mu_v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      mu_v = context__.vals_r("mu_v")[(1 - 1)];
      double mu_v_free__;
      mu_v_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 11;
      mu_v_free__ = stan::math::lub_free(mu_v, 0, 1);
      double sigma_v;
      sigma_v = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_v = context__.vals_r("sigma_v")[(1 - 1)];
      double sigma_v_free__;
      sigma_v_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 12;
      sigma_v_free__ = stan::math::lb_free(sigma_v, 0);
      vars__.emplace_back(mu_r_free__);
      vars__.emplace_back(sigma_r_free__);
      vars__.emplace_back(mu_g_free__);
      vars__.emplace_back(sigma_g_free__);
      vars__.emplace_back(mu_b_free__);
      vars__.emplace_back(sigma_b_free__);
      vars__.emplace_back(mu_h);
      vars__.emplace_back(kappa_h_free__);
      vars__.emplace_back(mu_s_free__);
      vars__.emplace_back(sigma_s_free__);
      vars__.emplace_back(mu_v_free__);
      vars__.emplace_back(sigma_v_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("mu_r");
    names__.emplace_back("sigma_r");
    names__.emplace_back("mu_g");
    names__.emplace_back("sigma_g");
    names__.emplace_back("mu_b");
    names__.emplace_back("sigma_b");
    names__.emplace_back("mu_h");
    names__.emplace_back("kappa_h");
    names__.emplace_back("mu_s");
    names__.emplace_back("sigma_s");
    names__.emplace_back("mu_v");
    names__.emplace_back("sigma_v");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_r");
    param_names__.emplace_back(std::string() + "sigma_r");
    param_names__.emplace_back(std::string() + "mu_g");
    param_names__.emplace_back(std::string() + "sigma_g");
    param_names__.emplace_back(std::string() + "mu_b");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "mu_h");
    param_names__.emplace_back(std::string() + "kappa_h");
    param_names__.emplace_back(std::string() + "mu_s");
    param_names__.emplace_back(std::string() + "sigma_s");
    param_names__.emplace_back(std::string() + "mu_v");
    param_names__.emplace_back(std::string() + "sigma_v");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "mu_r");
    param_names__.emplace_back(std::string() + "sigma_r");
    param_names__.emplace_back(std::string() + "mu_g");
    param_names__.emplace_back(std::string() + "sigma_g");
    param_names__.emplace_back(std::string() + "mu_b");
    param_names__.emplace_back(std::string() + "sigma_b");
    param_names__.emplace_back(std::string() + "mu_h");
    param_names__.emplace_back(std::string() + "kappa_h");
    param_names__.emplace_back(std::string() + "mu_s");
    param_names__.emplace_back(std::string() + "sigma_s");
    param_names__.emplace_back(std::string() + "mu_v");
    param_names__.emplace_back(std::string() + "sigma_v");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"mu_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_r\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_g\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_b\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"kappa_h\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_s\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_v\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_color_namespace::model_color;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_color_namespace::profiles__;
}
#endif
#endif
